(in-package :q)

(defun dgeco-hook (a lda n ipvt rcond z)
  ;;(declare (type (simple-array double-float (*)) z))
  ;;(declare (type double-float rcond))
  ;;(declare (type (simple-array fixnum (*)) ipvt))
  (declare (type fixnum n))
  (declare (type fixnum lda))
  ;;(declare (type (simple-array double-float (* *)) a))
  (prog ((t_ 0.0d0) (wkm 0.0d0) (wk 0.0d0) (ek 0.0d0) (ynorm 0.0d0)
         (sm 0.0d0) (s 0.0d0) (anorm 0.0d0) (l 0) (kp1 0) (kb 0) (k 0)
         (j 0) (info (array 0 :dimensions 'nil)))
    ;;(declare (type fixnum info))
    (declare (type fixnum j))
    (declare (type fixnum k))
    (declare (type fixnum kb))
    (declare (type fixnum kp1))
    (declare (type fixnum l))
    (declare (type double-float anorm))
    (declare (type double-float s))
    (declare (type double-float sm))
    (declare (type double-float ynorm))
    (declare (type double-float ek))
    (declare (type double-float t_))
    (declare (type double-float wk))
    (declare (type double-float wkm))
    (setf anorm 0.0d0)
    (fdo (j 1 (+ j 1))
         ((> j n) nil)
         (tagbody (setf anorm (dmax1 anorm (dasum-hook n (vec-ref a 1 j) 1)))))
    (dgefa-hook a lda n ipvt info)
    (setf ek 1.0d0)
    (fdo (j 1 (+ j 1))
         ((> j n) nil)
         (tagbody (setf (fref z j) 0.0)))
    (fdo (k 1 (+ k 1))
         ((> k n) nil)
         (tagbody (if (/= (fref z k) 0.0)
                    (setf ek (dsign ek (- (fref z k)))))
                  (if (<= (dabs (+ ek (- (fref z k)))) (dabs (fref a k k)))
                    (go label30))
                  (setf s
                        (f2cl/ (dabs (fref a k k))
                               (dabs (+ ek (- (fref z k))))))
                  (dscal-hook n s z 1)
                  (setf ek (* s ek))
                  label30 (setf wk (- ek (fref z k)))
                  (setf wkm (- (- ek) (fref z k)))
                  (setf s (dabs wk))
                  (setf sm (dabs wkm))
                  (if (= (fref a k k) 0.0) (go label40))
                  (setf wk (f2cl/ wk (fref a k k)))
                  (setf wkm (f2cl/ wkm (fref a k k)))
                  (go label50)
                  label40 (setf wk 1.0d0)
                  (setf wkm 1.0d0)
                  label50 (setf kp1 (+ k 1))
                  (if (> kp1 n) (go label90))
                  (fdo (j kp1 (+ j 1))
                       ((> j n) nil)
                       (tagbody (setf sm
                                      (+
                                       sm
                                       (dabs
                                        (+
                                         (fref z j)
                                         (* wkm (fref a k j))))))
                                (setf (fref z j) (+ (fref z j) (* wk (fref a k j))))
                                (setf s (+ s (dabs (fref z j))))))
                  (if (>= s sm) (go label80))
                  (setf t_ (+ wkm (- wk)))
                  (setf wk wkm)
                  (fdo (j kp1 (+ j 1))
                       ((> j n) nil)
                       (tagbody (setf (fref z j) (+ (fref z j) (* t_ (fref a k j))))))
                  label80 label90 (setf (fref z k) wk)))
    (setf s (f2cl/ 1.0 (dasum-hook n z 1)))
    (dscal-hook n s z 1)
    (fdo (kb 1 (+ kb 1))
         ((> kb n) nil)
         (tagbody (setf k (+ (+ n 1) (- kb)))
                  (if (< k n)
                    (setf (fref z k)
                          (+ (fref z k) 
                             (ddot-hook (- n k) (vec-ref a (+ k 1) k) 1 (vec-ref z (+ 1 k)) 1))))
                  (if (<= (dabs (fref z k)) 1.0) (go label110))
                  (setf s (f2cl/ 1.0 (dabs (fref z k))))
                  (dscal-hook n s z 1)
                  label110 (setf l (fref ipvt k))
                  (setf t_ (fref z l))
                  (setf (fref z l) (fref z k))
                  (setf (fref z k) t_)))
    (setf s (f2cl/ 1.0 (dasum-hook n z 1)))
    (dscal-hook n s z 1)
    (setf ynorm 1.0d0)
    (fdo (k 1 (+ k 1))
         ((> k n) nil)
         (tagbody (setf l (fref ipvt k))
                  (setf t_ (fref z l))
                  (setf (fref z l) (fref z k))
                  (setf (fref z k) t_)
                  (if (< k n)
                    (daxpy-hook (- n k) t_ (vec-ref a (+ k 1) k) 1
                                (vec-ref z (+ k 1)) 1))
                  (if (<= (dabs (fref z k)) 1.0) (go label130))
                  (setf s (f2cl/ 1.0 (dabs (fref z k))))
                  (dscal-hook n s z 1)
                  (setf ynorm (* s ynorm))
                  label130))
    (setf s (f2cl/ 1.0 (dasum-hook n z 1)))
    (dscal-hook n s z 1)
    (setf ynorm (* s ynorm))
    (fdo (kb 1 (+ kb 1))
         ((> kb n) nil)
         (tagbody (setf k (+ (+ n 1) (- kb)))
                  (if (<= (dabs (fref z k)) (dabs (fref a k k)))
                    (go label150))
                  (setf s (f2cl/ (dabs (fref a k k)) (dabs (fref z k))))
                  (dscal-hook n s z 1)
                  (setf ynorm (* s ynorm))
                  label150 (if (/= (fref a k k) 0.0) (setf (fref z k) (/ (fref z k)(fref a k k))))
                  (if (= (fref a k k) 0.0) (setf (fref z k) 1.0))
                  (setf t_ (- (fref z k)))
                  (daxpy-hook (+ k (- 1)) t_ (vec-ref a 1 k) 1 (vec-ref z 1) 1)))
    (setf s (f2cl/ 1.0 (dasum-hook n z 1)))
    (dscal-hook n s z 1)
    (setf ynorm (* s ynorm))
    (if (/= anorm 0.0) (setf (fref rcond 1) (f2cl/ ynorm anorm)))
    (if (= anorm 0.0) (setf (fref rcond 1) 0.0))
    (return (values a lda n ipvt rcond z))))

