(in-package :q)

(defun ddot-hook (n dx incx dy incy)
  (declare (type fixnum incy))
  ;;(declare (type (simple-array double-float (*)) dy))
  (declare (type fixnum incx))
  ;;(declare (type (simple-array double-float (*)) dx))
  (declare (type fixnum n))
  (prog ((ddot 0.0d0) (dtemp 0.0d0) (mp1 0) (m 0) (iy 0) (ix 0) (i 0))
        (declare (type fixnum i))
        (declare (type fixnum ix))
        (declare (type fixnum iy))
        (declare (type fixnum m))
        (declare (type fixnum mp1))
        (declare (type double-float dtemp))
        (declare (type double-float ddot))
        (setf ddot 0.0d0)
        (setf dtemp 0.0d0)
        (if (<= n 0) (go end_label))
        (if (and (= incx 1) (= incy 1)) (go label20))
        (setf ix 1)
        (setf iy 1)
        (if (< incx 0) (setf ix (+ (* (+ (- n) 1) incx) 1)))
        (if (< incy 0) (setf iy (+ (* (+ (- n) 1) incy) 1)))
        (fdo (i 1 (+ i 1))
             ((> i n) nil)
             (tagbody (setf dtemp (+ dtemp (* (fref dx ix) (fref dy iy))))
                      (setf ix (+ ix incx))
                      (setf iy (+ iy incy))))
        (setf ddot dtemp)
        (go end_label)
   label20 (setf m (mod n 5))
        (if (= m 0) (go label40))
        (fdo (i 1 (+ i 1))
             ((> i m) nil)
             (tagbody (setf dtemp (+ dtemp (* (fref dx i) (fref dy i))))))
        (if (< n 5) (go label60))
   label40 (setf mp1 (+ m 1))
        (fdo (i mp1 (+ i 5))
             ((> i n) nil)
             (tagbody (setf dtemp
                            (+ dtemp
                               (* (fref dx i) (fref dy i))
                               (* (fref dx (+ i 1)) (fref dy (+ i 1)))
                               (* (fref dx (+ i 2)) (fref dy (+ i 2)))
                               (* (fref dx (+ i 3)) (fref dy (+ i 3)))
                               (* (fref dx (+ i 4)) (fref dy (+ i 4)))))))
   label60 (setf ddot dtemp)
        (go end_label)
   end_label (return ddot)))

