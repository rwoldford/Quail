(in-package :q)

(defun dasum-hook (n dx incx)
  (declare (type fixnum incx))
  ;;(declare (type (simple-array double-float (*)) dx))
  (declare (type fixnum n))
  (prog ((dasum_ 0.0d0) (dtemp 0.0d0) (nincx 0) (mp1 0) (m 0) (i 0))
    (declare (type fixnum i))
    (declare (type fixnum m))
    (declare (type fixnum mp1))
    (declare (type fixnum nincx))
    (declare (type double-float dtemp))
    (declare (type double-float dasum_))
    (setf dasum_ 0.0d0)
    (setf dtemp 0.0d0)
    (if (<= n 0) (go end_label))
    (if (= incx 1) (go label20))
    (setf nincx (* n incx))
    (fdo (i 1 (+ i incx))
         ((> i nincx) nil)
         (tagbody (setf dtemp (+ dtemp (dabs (fref dx i))))))
    (setf dasum_ dtemp)
    (go end_label)
    label20 (setf m (mod n 6))
    (if (= m 0) (go label40))
    (fdo (i 1 (+ i 1))
         ((> i m) nil)
         (tagbody (setf dtemp (+ dtemp (dabs (fref dx i))))))
    (if (< n 6) (go label60))
    label40 (setf mp1 (+ m 1))
    (fdo (i mp1 (+ i 6))
         ((> i n) nil)
         (tagbody (setf dtemp
                        (+ dtemp 
                           (dabs (fref dx i))
                           (dabs (fref dx (+ i 1)))
                           (dabs (fref dx (+ i 2)))
                           (dabs (fref dx (+ i 3)))
                           (dabs (fref dx (+ i 4)))
                           (dabs (fref dx (+ i 5)))))))
    label60 (setf dasum_ dtemp)
    (go end_label)
    end_label (return dasum_)))

