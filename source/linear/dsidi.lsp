;;; not yet tested. CW.

(in-package :q)

(defun dsidi-hook (a lda n kpvt det inert work job)
  (declare (type fixnum job))
  ;(declare (type (simple-array double-float (*)) work))
  ;(declare (type (simple-array fixnum (*)) inert))
  ;(declare (type (simple-array double-float (*)) det))
  ;(declare (type (simple-array fixnum (*)) kpvt))
  (declare (type fixnum n))
  (declare (type fixnum lda))
  ;(declare (type (simple-array double-float (* *)) a))
  (prog ((t_ 0.0d0) (temp 0.0d0) (akkp1 0.0d0) (akp1 0.0d0) (ak 0.0d0)
         (d 0.0d0) (kstep 0) (ks 0) (km1 0) (k 0) (jb 0) (j 0)
         (noert nil) (nodet nil) (noinv nil))
        (declare (type t noinv))
        (declare (type t nodet))
        (declare (type t noert))
        (declare (type fixnum j))
        (declare (type fixnum jb))
        (declare (type fixnum k))
        (declare (type fixnum km1))
        (declare (type fixnum ks))
        (declare (type fixnum kstep))
        (declare (type double-float d))
        (declare (type double-float t_))
        (declare (type double-float ak))
        (declare (type double-float akp1))
        (declare (type double-float akkp1))
        (declare (type double-float temp))

        (setf noinv (= (mod job 10) 0))
        (setf nodet (= (f2cl/ (mod job 100) 10) 0))
        (setf noert (= (f2cl/ (mod job 1000) 100) 0))
        (if (and nodet noert) (go label140))
        (if noert (go label10))
        (setf (fref inert 1) 0)
        (setf (fref inert 2) 0)
        (setf (fref inert 3) 0)
   label10 (if nodet (go label20))
        (setf (fref det 1) 1.0)
        (setf (fref det 2) 0.0)
   label20 (setf t_ 0.0d0)
        (fdo (k 1 (+ k 1))
             ((> k n) nil)
             (tagbody (setf d (fref a k k))
                      (if (> (fref kpvt k) 0) (go label50))
                      (if (/= t_ 0.0d0) (go label30))
                      (setf t_ (dabs (fref a k (+ k 1))))
                      (setf d
                            (+ (* (f2cl/ d t_) (fref a (+ k 1) (+ k 1)))
                               (- t_)))
                      (go label40)
              label30 (setf d t_)
                      (setf t_ 0.0d0)
              label40 label50 (if noert (go label60))
                      (if (> d 0.0d0) (setf (fref inert 1) (+ (fref inert 1) 1)))
                      (if (< d 0.0d0) (setf (fref inert 2) (+ (fref inert 2) 1)))
                      (if (= d 0.0d0) (setf (fref inert 3) (+ (fref inert 3) 1)))
              label60 (if nodet (go label120))
                      (setf (fref det 1) (* d (fref det 1)))
                      (if (= (fref det 1) 0.0) (go label110))
              label70 (if (>= (dabs (fref det 1)) 1.0) (go label80))
                      (setf (fref det 1) (* 10.0 (fref det 1)))
                      (setf (fref det 2) (- (fref det 2) 1.0))
                      (go label70)
              label80 label90 (if (< (dabs (fref det 1)) 10.0) (go label100))
                      (setf (fref det 1) (f2cl/ (fref det 1) 10.0))
                      (setf (fref det 2) (+ (fref det 2) 1.0))
                      (go label90)
              label100 label110 label120))
   label140 (if noinv (go label270))
        (setf k 1)
   label150 (if (> k n) (go label260))
        (setf km1 (- k 1))
        (if (< (fref kpvt k) 0) (go label180))
        (setf (fref a k k) (f2cl/ 1.0 (fref a k k)))
        (if (< km1 1) (go label170))
        (dcopy-hook km1 (vec-ref a 1 k) 1 work 1)
        (fdo (j 1 (+ j 1))
             ((> j km1) nil)
             (tagbody (setf (fref a j k) (ddot j (vec-ref a 1 j) 1 work 1))
               (daxpy-hook (- j 1) (fref work j) (vec-ref a 1 j) 1
                         (vec-ref a 1 k) 1)))
            (setf (fref a k k) (+ (fref a k k) (ddot km1 work 1 (vec-ref a 1 k) 1)))
   label170 (setf kstep 1)
        (go label220)
   label180 (setf t_ (dabs (fref a k (+ k 1))))
        (setf ak (f2cl/ (fref a k k) t_))
        (setf akp1 (f2cl/ (fref a (+ k 1) (+ k 1)) t_))
        (setf akkp1 (f2cl/ (fref a k (+ k 1)) t_))
        (setf d (* t_ (+ (* ak akp1) (- 1.0d0))))
        (setf (fref a k k) (f2cl/ akp1 d))
        (setf (fref a (+ k 1) (+ k 1)) (f2cl/ ak d))
        (setf (fref a k (+ k 1)) (f2cl/ (- akkp1) d))
        (if (< km1 1) (go label210))
        (dcopy-hook km1 (vec-ref a 1 (+ k 1)) 1 work 1)
        (fdo (j 1 (+ j 1))
             ((> j km1) nil)
             (tagbody (setf (fref a j (+ k 1)) (ddot j (vec-ref a 1 j) 1 work 1))
               (daxpy-hook (- j 1) (fref work j) (vec-ref a 1 j) 1
                           (vec-ref a 1 (+ k 1)) 1)))
        (setf (fref a (+ k 1) (+ k 1)) (+ (fref a (+ k 1) (+ k 1))
                                          (ddot km1 work 1 (vec-ref a 1 (+ k 1)) 1)))
        (setf (fref a k (+ k 1)) (+ (fref a k (+ k 1))
                                    (ddot km1 (vec-ref a 1 k) 1 (vec-ref a 1 (+ k 1)) 1)))
        (dcopy-hook km1 (vec-ref a 1 k) 1 work 1)
        (fdo (j 1 (+ j 1))
             ((> j km1) nil)
             (tagbody
               (setf (fref a j k) (ddot j (vec-ref a 1 j) 1 work 1))
               (daxpy-hook (- j 1) (fref work j) (vec-ref a 1 j) 1 (vec-ref a 1 k) 1)))
        (setf (fref a k k) (+ (fref a k k)
                              (ddot km1 work a (vec-ref a 1 k) 1)))
   label210 (setf kstep 2)
   label220 (setf ks (iabs (fref kpvt k)))
        (if (= ks k) (go label250))
        (dswap-hook ks (vec-ref a 1 ks) 1 (vec-ref a 1 k) 1)
        (fdo (jb ks (+ jb 1))
             ((> jb k) nil)
             (tagbody (setf j (+ (+ k ks) (- jb)))
                      (setf temp (fref a j k))
                      (setf (fref a j k) (fref a ks j))
                      (setf (fref a ks j) temp)))
        (if (= kstep 1) (go label240))
        (setf temp (fref a ks (+ k 1)))
        (setf (fref a ks (+ k 1)) (fref a k (+ k 1)))
        (setf (fref a k (+ k 1)) temp)
   label240 label250 (setf k (+ k kstep))
        (go label150)
   label260 label270 (return (values a lda n kpvt det inert work job))))

