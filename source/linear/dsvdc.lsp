(in-package :q)

(defvar *tag-hack1*) ;; Prevents ACL compiler overflow. gwb
                     ;; encloses tagbody forms below. gwb

(defun dsvdc-hook (x ldx n p s e u ldu v ldv work job info)
  ;;(declare (type fixnum info))
  (declare (type fixnum job))
  ;;(declare (type (simple-array double-float (*)) work))
  (declare (type fixnum ldv))
  ;;(declare (type (simple-array double-float (* *)) v))
  (declare (type fixnum ldu))
  ;;(declare (type (simple-array double-float (* *)) u))
  ;;(declare (type (simple-array double-float (*)) e))
  ;;(declare (type (simple-array double-float (*)) s))
  (declare (type fixnum p))
  (declare (type fixnum n))
  (declare (type fixnum ldx))
  ;;(declare (type (simple-array double-float (* *)) x))
  (prog ((t_ 0.0d0) (nrtp1 0) (nrt 0) (ncu 0) (nctp1 0) (nct 0)
         (mp1 0) (mm1 0) (mm 0) (maxit 0) (m 0) (lu 0) (ls 0) (lp1 0) (lm1 0)
         (lls 0) (ll 0) (l 0) (kk 0) (kase 0) (k 0) (jobu 0) (j 0) (iter 0)
         (i 0) (ztest 0.0d0) (test 0.0d0) (t1 0.0d0)
         (smm1 0.0d0) (sn 0.0d0) (sm 0.0d0) (sl 0.0d0) (shift 0.0d0) (scale 0.0d0)
         (g 0.0d0) (f 0.0d0) (emm1 0.0d0) (el 0.0d0) (cs 0.0d0) (c 0.0d0)
         (b 0.0d0) (wantv nil) (wantu nil))
        (declare (type t wantu))
        (declare (type t wantv))
        (declare (type double-float b))
        (declare (type double-float c))
        (declare (type double-float cs))
        (declare (type double-float el))
        (declare (type double-float emm1))
        (declare (type double-float f))
        (declare (type double-float g))
        (declare (type double-float scale))
        (declare (type double-float shift))
        (declare (type double-float sl))
        (declare (type double-float sm))
        (declare (type double-float sn))
        (declare (type double-float smm1))
        (declare (type double-float t1))
        (declare (type double-float test))
        (declare (type double-float ztest))
        (declare (type double-float t_))
        (declare (type fixnum i))
        (declare (type fixnum iter))
        (declare (type fixnum j))
        (declare (type fixnum jobu))
        (declare (type fixnum k))
        (declare (type fixnum kase))
        (declare (type fixnum kk))
        (declare (type fixnum l))
        (declare (type fixnum ll))
        (declare (type fixnum lls))
        (declare (type fixnum lm1))
        (declare (type fixnum lp1))
        (declare (type fixnum ls))
        (declare (type fixnum lu))
        (declare (type fixnum m))
        (declare (type fixnum maxit))
        (declare (type fixnum mm))
        (declare (type fixnum mm1))
        (declare (type fixnum mp1))
        (declare (type fixnum nct))
        (declare (type fixnum nctp1))
        (declare (type fixnum ncu))
        (declare (type fixnum nrt))
        (declare (type fixnum nrtp1))
        (setf maxit 30)
        (setf wantu NIL)
        (setf wantv NIL)
        (setf jobu (f2cl/ (mod job 100) 10))
        (setf ncu n)
        (if (> jobu 1) (setf ncu (min0 n p)))
        (if (/= jobu 0) (setf wantu t))
        (if (/= (mod job 10) 0) (setf wantv t))
        (setf (fref info 1) 0)
        (setf nct (min0 (+ n (- 1)) p))
        (setf nrt (max0 0 (min0 (+ p (- 2)) n)))
        (setf lu (max0 nct nrt))
        (if (< lu 1) (go label170))
        (fdo (l 1 (+ l 1))
             ((> l lu) nil)
             (let (*tag-hack1*)
             (tagbody (setf lp1 (+ l 1))
                      (if (> l nct) (go label20))
                      (setf (fref s l) (dnrm2 (+ (- n l) 1) (vec-ref x l l) 1))
                      (if (= (fref s l) 0.0) (go label10))
                      (if (/= (fref x l l) 0.0)
                        (setf (fref s l) (sign (fref s l)
                                               (fref x l l))))                               
                      (dscal-hook (+ (- n l) 1) (f2cl/ 1.0 (fref s l))
                         (vec-ref x l l) 1)
                      (setf (fref x l l) (+ 1.0 (fref x l l)))
              label10 (setf (fref s l) (- (fref s l)))
              label20 (if (< p lp1) (go label50))
                      (fdo (j lp1 (+ j 1))
                           ((> j p) nil)
                           (tagbody (if (> l nct) (go label30))
                                    (if (= (fref s l) 0.0) (go label30))
                                    (setf t_
                                          (f2cl/
                                           (*
                                            -1
                                            (ddot-hook
                                             (+ (+ n (- l)) 1)
                                             (vec-ref x l l)
                                             1
                                             (vec-ref x l j)
                                             1))
                                           (fref x l l)))
                                    (daxpy-hook (+ (- n l) 1) t_ (vec-ref x l l)
                                       1 (vec-ref x l j) 1)
                            label30 (setf (fref e j) (fref x l j))))
              label50 (if (or (not wantu) (> l nct)) (go label70))
                      (fdo (i l (+ i 1))
                           ((> i n) nil)
                           (tagbody (setf (fref u i l) (fref x i l))))
              label70 (if (> l nrt) (go label150))
                      (setf (fref e l) (dnrm2-hook (- p l) (vec-ref e lp1) 1))
                      (if (= (fref e l) 0.0) (go label80))
                      (if (/= (fref e lp1) 0.0) 
                        (setf (fref e l) (sign (fref e l) (fref e lp1))))
                      (dscal-hook (- p l) (f2cl/ 1.0 (fref e l)) (vec-ref e lp1)
                         1)
                      (setf (fref e lp1) (+ 1.0 (fref e lp1)))
              label80 
                      (setf (fref e l) (-  (fref e l)))
                      (if (or (> lp1 n) (= (fref e l) 0.0)) (go label120))
                      (fdo (i lp1 (+ i 1))
                           ((> i n) nil)
                           (tagbody (setf (fref work i) 0.0)))
                      (fdo (j lp1 (+ j 1))
                           ((> j p) nil)
                           (tagbody (daxpy-hook (- n l) (fref e j)
                                       (vec-ref x lp1 j) 1 (vec-ref work lp1) 1)))
                      (fdo (j lp1 (+ j 1))
                           ((> j p) nil)
                           (tagbody (daxpy-hook (- n l)
                                       (f2cl/ (* -1 (fref e j)) (fref e lp1))
                                       (vec-ref work lp1) 1 (vec-ref x lp1 j) 1)))
              label120 (if (not wantv) (go label140))
                      (fdo (i lp1 (+ i 1))
                           ((> i p) nil)
                           (tagbody (setf (fref v i l) (fref e i))))
              label140 label150))
        )
   label170 (setf m (min0 p (+ n 1)))
        (setf nctp1 (+ nct 1))
        (setf nrtp1 (+ nrt 1))
        (if (< nct p) (setf (fref s nctp1) (fref x nctp1 nctp1)))
        (if (< n m) (setf (fref s m) 0.0))
        (if (< nrtp1 m) (setf (fref e nrtp1) (fref x nrtp1 m)))
        (setf (fref e m) 0.0)
        (if (not wantu) (go label300))
        (if (< ncu nctp1) (go label200))
        (fdo (j nctp1 (+ j 1))
             ((> j ncu) nil)
             (let (*tag-hack1*)
             (tagbody (fdo (i 1 (+ i 1))
                           ((> i n) nil)
                           (tagbody (setf (fref u i j) 0.0)))
                      (setf (fref u j j) 1.0)))
         )
   label200 (if (< nct 1) (go label290))
        (fdo (ll 1 (+ ll 1))
             ((> ll nct) nil)
             (let (*tag-hack1*)
             (tagbody (setf l (+ (+ nct (- ll)) 1))
                      (if (= (fref s l) 0.0) (go label250))
                      (setf lp1 (+ l 1))
                      (if (< ncu lp1) (go label220))
                      (fdo (j lp1 (+ j 1))
                           ((> j ncu) nil)
                           (tagbody (setf t_
                                          (f2cl/
                                           (*
                                            -1
                                            (ddot-hook
                                             (+ (+ n (- l)) 1)
                                             (vec-ref u l l)
                                             1
                                             (vec-ref u l j)
                                             1))
                                           (fref u l l)))
                                    (daxpy-hook (+ (- n l) 1) t_ (vec-ref u l l)
                                       1 (vec-ref u l j) 1)))
              label220 (dscal-hook (+ (- n l) 1) (- 1.0) (vec-ref u l l) 1)
                       (setf (fref u l l) (+ 1.0 (fref u l l)))
                      (setf lm1 (+ l (- 1)))
                      (if (< lm1 1) (go label240))
                      (fdo (i 1 (+ i 1))
                           ((> i lm1) nil)
                           (tagbody (setf (fref u i l) 0.0)))
              label240 (go label270)
              label250 (fdo (i 1 (+ i 1))
                            ((> i n) nil)
                            (tagbody (setf (fref u i l) 0.0)))
                       (setf (fref u l l) 1.0)
              label270))
         )
   label290 label300 (if (not wantv) (go label350))
        (fdo (ll 1 (+ ll 1))
             ((> ll p) nil)
            (let (*tag-hack1*)
             (tagbody (setf l (+ (+ p (- ll)) 1))
                      (setf lp1 (+ l 1))
                      (if (> l nrt) (go label320))
                      (if (= (fref e l) 0.0) (go label320))
                      (fdo (j lp1 (+ j 1))
                           ((> j p) nil)
                           (let (*tag-hack1*)
                           (tagbody (setf t_
                                          (f2cl/
                                           (*
                                            -1
                                            (ddot-hook
                                             (+ p (- l))
                                             (vec-ref v lp1 l)
                                             1
                                             (vec-ref v lp1 j)
                                             1))
                                           (fref v lp1 l)))
                                    (daxpy-hook (- p l) t_ (vec-ref v lp1 l) 1
                                       (vec-ref v lp1 j) 1)))
                      )
              label320 (fdo (i 1 (+ i 1))
                            ((> i p) nil)
                          (let (*tag-hack1*)
                            (tagbody (setf (fref v i l) 0.0)))
                        )
                       (setf (fref v l l) 1.0)))
       )
   label350 (setf mm m)
        (setf iter 0)
   label360 (if (= m 0) (go label620))
        (if (< iter maxit) (go label370))
        (setf (fref info 1) m)
        (go label620)
   label370 (fdo (ll 1 (+ ll 1))
                 ((> ll m) nil)
              (let (*tag-hack1*)
                 (tagbody (setf l (+ m (- ll)))
                          (if (= l 0) (go label400))
                          (setf test
                                (+ (dabs (fref s l)) (dabs (fref s (+ l 1)))))
                          (setf ztest (+ test (dabs (fref e l))))
                          (if (/= ztest test) (go label380))
                          (go label400)
                  label380))
              )
   label400 (if (/= l (+ m (- 1))) (go label410))
        (setf kase 4)
        (go label480)
   label410 (setf lp1 (+ l 1))
        (setf mp1 (+ m 1))
        (fdo (lls lp1 (+ lls 1))
             ((> lls mp1) nil)
          (let (*tag-hack1*)
             (tagbody (setf ls (+ (+ m (- lls)) lp1))
                      (if (= ls l) (go label440))
                      (setf test 0.0d0)
                      (if (/= ls m) (setf test (+ test (dabs (fref e ls)))))
                      (if (/= ls (+ l 1))
                          (setf test (+ test (dabs (fref e (+ ls (- 1)))))))
                      (setf ztest (+ test (dabs (fref s ls))))
                      (if (/= ztest test) (go label420))
                      (go label440)
              label420))
         )
   label440 (if (/= ls l) (go label450))
        (setf kase 3)
        (go label470)
   label450 (if (/= ls m) (go label460))
        (setf kase 1)
        (go label470)
   label460 (setf kase 2)
        (setf l ls)
   label470 label480 (setf l (+ l 1))
        (case kase (1 (go label490))
                   (2 (go label520))
                   (3 (go label540))
                   (4 (go label570)))
   label490 (setf mm1 (+ m (- 1)))
        (setf f (fref e (+ m (- 1))))
        (setf (fref e (- m 1)) 0.0)
        (fdo (kk l (+ kk 1))
             ((> kk mm1) nil)
          (let (*tag-hack1*)
             (tagbody (setf k (+ (+ mm1 (- kk)) l))
                      (setf t1 (fref s k))
                      (multiple-value-setq (t1 f cs sn)
                        (drotg-hook t1 f cs sn))
                      (setf (fref s k) t1)
                      (if (= k l) (go label500))
                      (setf f (* (* -1 sn) (fref e (+ k (- 1)))))
                      (setf (fref e (- k 1)) (* cs (fref e (- k 1))))
              label500 (if wantv
                           (drot-hook p (vec-ref v 1 k) 1 (vec-ref v 1 m) 1 cs sn))))
         )
        (go label610)
   label520 (setf f (fref e (- l 1)))
        (setf (fref e (- l 1)) 0.0)
        (fdo (k l (+ k 1))
             ((> k m) nil)
         (let (*tag-hack1*)
             (tagbody (setf t1 (fref s k))
                      (multiple-value-setq (t1 f cs sn)
                        (drotg-hook t1 f cs sn))
                      (setf (fref s k) t1)
                      (setf f (* (* -1 sn) (fref e k)))
                      (setf (fref e k) (* cs (fref e k)))
                      (if wantu
                          (drot-hook n (vec-ref u 1 k) 1 (vec-ref u 1 (+ l (- 1))) 1 cs
                             sn))))
        )
        (go label610)
   label540 (setf scale
              (dmax1 (dabs (fref s m))
                     (dabs (fref s (+ m (- 1))))
                     (dabs (fref e (+ m (- 1))))
                     (dabs (fref s l))
                     (dabs (fref e l))))
        (setf sm (f2cl/ (fref s m) scale))
        (setf smm1 (f2cl/ (fref s (+ m (- 1))) scale))
        (setf emm1 (f2cl/ (fref e (+ m (- 1))) scale))
        (setf sl (f2cl/ (fref s l) scale))
        (setf el (f2cl/ (fref e l) scale))
        (setf b (f2cl/ (+ (* (+ smm1 sm) (+ smm1 (- sm))) (expt emm1 2)) 2.0d0))
        (setf c (expt (* sm emm1) 2))
        (setf shift 0.0d0)
        (if (and (= b 0.0d0) (= c 0.0d0)) (go label550))
        (setf shift (dsqrt (+ (expt b 2) c)))
        (if (< b 0.0d0) (setf shift (- shift)))
        (setf shift (f2cl/ c (+ b shift)))
   label550 (setf f (+ (* (+ sl sm) (+ sl (- sm))) shift))
        (setf g (* sl el))
        (setf mm1 (+ m (- 1)))
        (fdo (k l (+ k 1))
             ((> k mm1) nil)
          (let (*tag-hack1*)
             (tagbody (multiple-value-setq (f g cs sn)
                        (drotg-hook f g cs sn))
                      (if (/= k l) (setf (fref e (- k 1)) f))
                      (setf f (+ (* cs (fref s k)) (* sn (fref e k))))
                      (setf (fref e k) (- (* cs (fref e k)) (* sn (fref s k))))
                      (setf g (* sn (fref s (+ k 1))))
                      (setf (fref s (+ k 1)) (* cs (fref s (+ k 1))))
                      (if wantv
                          (drot-hook p (vec-ref v 1 k) 1 (vec-ref v 1 (+ k 1)) 1 cs
                             sn))
                      (multiple-value-setq (f g cs sn)
                        (drotg-hook f g cs sn))
                      (setf (fref s k) f)
                      (setf f (+ (* cs (fref e k)) (* sn (fref s (+ k 1)))))
                      (setf (fref s (+ k 1)) (+ (* (- sn) (fref e k))
                                                (* cs (fref s (+ k 1)))))
                      (setf g (* sn (fref e (+ k 1))))
                      (setf (fref e (+ k 1)) (* cs (fref e (+ k 1))))
                      (if (and wantu (< k n))
                          (drot-hook n (vec-ref u 1 k) 1 (vec-ref u 1 (+ k 1)) 1 cs
                             sn))))
          )
        (setf (fref e (- m 1)) f)
        (setf iter (+ iter 1))
        (go label610)
   label570 (if (>= (fref s l) 0.0) (go label580))
        (setf (fref s l) (- (fref s l)))
        (if wantv
            (dscal-hook p (- 1.0) (vec-ref v 1 l) 1))
   label580 label590 (if (= l mm) (go label600))
        (if (>= (fref s l) (fref s (+ l 1))) (go label600))
        (setf t_ (fref s l))
        (setf (fref s l) (fref s (+ l 1)))
        (setf (fref s (+ l 1)) t_)
        (if (and wantv (< l p))
            (dswap-hook p (vec-ref v 1 l) 1 (vec-ref v 1 (+ l 1)) 1))
        (if (and wantu (< l n))
            (dswap-hook n (vec-ref u 1 l) 1 (vec-ref u 1 (+ l 1)) 1))
        (setf l (+ l 1))
        (go label590)
   label600 (setf iter 0)
        (setf m (+ m (- 1)))
   label610 (go label360)
   label620 (return (values x ldx n p s e u ldu v ldv work job info))))
