(in-package :q)

(defun drot-hook (n dx incx dy incy c s)
  (declare (type double-float s))
  (declare (type double-float c))
  (declare (type fixnum incy))
  ;;(declare (type (simple-array double-float (*)) dy))
  (declare (type fixnum incx))
  ;;(declare (type (simple-array double-float (*)) dx))
  (declare (type fixnum n))
  (prog ((dtemp 0.0d0) (iy 0) (ix 0) (i 0))
        (declare (type fixnum i))
        (declare (type fixnum ix))
        (declare (type fixnum iy))
        (declare (type double-float dtemp))
        (if (<= n 0) (go end_label))
        (if (and (= incx 1) (= incy 1)) (go label20))
        (setf ix 1)
        (setf iy 1)
        (if (< incx 0) (setf ix (+ (* (- 1 n) incx) 1)))
        (if (< incy 0) (setf iy (+ (* (- 1 n) incy) 1)))
        (fdo (i 1 (+ i 1))
             ((> i n) nil)
             (tagbody (setf dtemp (+ (* c (fref dx ix)) (* s (fref dy iy))))
                      (setf (fref dy iy) (- (* c (fref dy iy)) (* s (fref dx ix))))
                      (setf (fref dx ix) dtemp)
                      (setf ix (+ ix incx))
                      (setf iy (+ iy incy))))
        (go end_label)
   label20 (fdo (i 1 (+ i 1))
                ((> i n) nil)
                (tagbody (setf dtemp (+ (* c (fref dx i)) (* s (fref dy i))))
                      (setf (fref dy i) (- (* c (fref dy i)) (* s (fref dx i))))
                      (setf (fref dx i) dtemp)
                      ))
        (go end_label)
   end_label (return (values n dx incx dy incy c s))))

