(in-package :q)

(defun drotg-hook (da db c s)
  (declare (type double-float s))
  (declare (type double-float c))
  (declare (type double-float db))
  (declare (type double-float da))
  (prog ((z 0.0d0) (r 0.0d0) (scale 0.0d0) (roe 0.0d0))
        (declare (type double-float roe))
        (declare (type double-float scale))
        (declare (type double-float r))
        (declare (type double-float z))
        (setf roe db)
        (if (> (dabs da) (dabs db)) (setf roe da))
        (setf scale (+ (dabs da) (dabs db)))
        (if (/= scale 0.0d0) (go label10))
        (setf c 1.0d0)
        (setf s 0.0d0)
        (setf r 0.0d0)
        (go label20)
   label10 (setf r
                 (* scale
                    (dsqrt (+ (expt (f2cl/ da scale) 2)
                              (expt (f2cl/ db scale) 2)))))
        (setf r (* (dsign 1.0 roe) r))
        (setf c (f2cl/ da r))
        (setf s (f2cl/ db r))
   label20 (setf z s)
        (if (and (> (dabs c) 0.0d0) (<= (dabs c) s)) (setf z (f2cl/ 1.0 c)))
        (setf da r)
        (setf db z)
        (return (values da db c s))))

