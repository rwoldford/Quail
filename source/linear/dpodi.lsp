(in-package :q)

(defun dpodi-hook (a lda n det job)
  (declare (type fixnum job))
  ;;(declare (type (simple-array double-float (*)) det))
  (declare (type fixnum n))
  (declare (type fixnum lda))
  ;;(declare (type (simple-array double-float (* *)) a))
  (prog ((t_ 0.0d0) (s 0.0d0) (kp1 0) (k 0) (jm1 0) (j 0) (i 0))
    ;(declare (type single-float t_)) ;double-float declaration below
    (declare (type fixnum i))
    (declare (type fixnum j))
    (declare (type fixnum jm1))
    (declare (type fixnum k))
    (declare (type fixnum kp1))
    (declare (type double-float s))
    (declare (type double-float t_))
    (if (= (f2cl/ job 10) 0) (go label70))
    (setf (fref det 1) 1.0)
    (setf (fref det 2) 0.0)
    (setf s 10.0d0)
    (fdo (i 1 (+ i 1))
         ((> i n) nil)
         (tagbody 
           (setf (fref det 1) (* (fref a i i) (fref a i i) (fref det 1)))
           (if (= (fref det 1) 0.0) (go label60))
           label10 (if (>= (fref det 1) 1.0) (go label20))
           (setf (fref det 1) (* s (fref det 1)))
           (setf (fref det 2) (- (fref det 2) 1.0))
           (go label10)
           label20
           label30 (if (< (fref det 1) s) (go label40))
           (setf (fref det 1) (f2cl/ (fref det 1) s))
           (setf (fref det 2) (+ (fref det 2) 1.0))
           (go label30)
           label40))
    label60 
    label70 (if (= (mod job 10) 0) (go label140))
    (fdo (k 1 (+ k 1))
         ((> k n) nil)
         (tagbody
           (setf (fref a k k) (f2cl/ 1.0 (fref a k k)))
           (setf t_ (- (fref a k k)))
           (dscal-hook (- k 1) t_ (vec-ref a 1 k) 1)
           (setf kp1 (+ k 1))
           (if (< n kp1) (go label90))
           (fdo (j kp1 (+ j 1))
                ((> j n) nil)
                (tagbody
                  (setf t_ (fref a k j))
                  (setf (fref a k j) 0.0)
                  (daxpy k t_ (vec-ref a 1 k) 1 (vec-ref a 1 j) 1)))
           label90))
    (fdo (j 1 (+ j 1))
         ((> j n) nil)
         (tagbody
           (setf jm1 (- j 1))
           (if (< jm1 1) (go label120))
           (fdo (k 1 (+ k 1))
                ((> k jm1) nil)
                (tagbody
                  (setf t_ (fref a k j))
                  (daxpy k t_ (vec-ref a 1 j) 1 (vec-ref a 1 k) 1)))
           label120 (setf t_ (fref a j j))
           (dscal-hook j t_ (vec-ref a 1 j) 1)))
    label140 (return (values a lda n det job))))

