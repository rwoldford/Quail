(in-package :q)

(defun dswap-hook (n dx incx dy incy)
  (declare (type fixnum incy))
  ;;(declare (type (simple-array double-float (*)) dy))
  (declare (type fixnum incx))
  ;;(declare (type (simple-array double-float (*)) dx))
  (declare (type fixnum n))
  (prog ((dtemp 0.0d0) (mp1 0) (m 0) (iy 0) (ix 0) (i 0))
    (declare (type fixnum i))
    (declare (type fixnum ix))
    (declare (type fixnum iy))
    (declare (type fixnum m))
    (declare (type fixnum mp1))
    (declare (type double-float dtemp))
    (if (<= n 0) (go end_label))
    (if (and (= incx 1) (= incy 1)) (go label20))
    (setf ix 1)
    (setf iy 1)
    (if (< incx 0) (setf ix (+ (* (+ (- n) 1) incx) 1)))
    (if (< incy 0) (setf iy (+ (* (+ (- n) 1) incy) 1)))
    (fdo (i 1 (+ i 1))
         ((> i n) nil)
         (tagbody (setf dtemp (fref dx ix))
                  (setf (fref dx ix) (fref dy iy))
                  (setf (fref dy iy) dtemp)
                  (setf ix (+ ix incx))
                  (setf iy (+ iy incy))))
    (go end_label)
    label20 (setf m (mod n 3))
    (if (= m 0) (go label40))
    (fdo (i 1 (+ i 1))
         ((> i m) nil)
         (tagbody (setf dtemp (fref dx i))
                  (setf (fref dx i) (fref dy i))
                  (setf (fref dy i) dtemp)))
    (if (< n 3) (go end_label))
    label40 (setf mp1 (+ m 1))
    (fdo (i mp1 (+ i 3))
         ((> i n) nil)
         (tagbody (setf dtemp (fref dx i))
                  (setf (fref dx i) (fref dy i))
                  (setf (fref dy i) dtemp)
                  (setf dtemp (fref dx (+ i 1)))
                  (setf (fref dx (+ i 1)) (fref dy (+ i 1)))
                  (setf (fref dy (+ i 1)) dtemp)
                  (setf dtemp (fref dx (+ i 2)))
                  (setf (fref dx (+ i 2)) (fref dy (+ i 2)))
                  (setf (fref dy (+ i 2)) dtemp)))
    (go end_label)
    end_label (return (values n dx incx dy incy))))

